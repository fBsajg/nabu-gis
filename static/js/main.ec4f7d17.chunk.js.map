{"version":3,"sources":["utils/MapConfig.tsx","utils/MapStyles.tsx","utils/LegendConfig.tsx","utils/MapUtils.tsx","components/Sidebar.tsx","components/Tab.tsx","components/Button.tsx","components/Property.tsx","components/Image.tsx","components/MapSidebar.tsx","components/Map.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["BaseLayers","Icons","baseLayerUrl","CartoVoyager","cartoLight","CartoLight","esriImg","EsriImg","view","View","center","zoom","maxZoom","minZoom","enableRotation","WFS","LayerGroup","title","openInLayerSwitcher","layers","TileLayer","baseLayer","source","Stamen","layer","visible","OSM","selectedColor","defaultColor","trackColor","Style","stroke","Stroke","color","width","styleFillColor","feature","get","styleStrokeColor","defaultPoly","fill","Fill","selectedStyle","lineStyle","image","CircleStyle","radius","defaultStyle","featType","getGeometry","getType","styleBird","LegendPoint","style","pointFeat","this","Feature","Point","setStyle","LegendPoly","polyFeat","Polygon","labelColors","labelStrokeColors","legendObj","forEach","label","index","legendList","Object","entries","item","i","pointDefault","point","getFeature","push","MapUtils","createBaseLayer","xyzUrl","xyzURL","baseSource","XYZSource","crossOrigin","url","baseGroup","createBaseGroup","Map","target","controls","defaultControls","extend","createScale","data","VectorSource","features","GeoJSON","readFeatures","dataProjection","featureProjection","vectorSource","createSource","VectorLayer","createVector","bussard","turmfalke","Select","toggleCondition","shiftKeyOnly","ScaleLine","className","map","vector","displayInLayerSwitcher","mainbar","Bar","addLayer","setPosition","editbar","toggleOne","group","save","Button","html","handleClick","e","json","writeFeatures","getSource","getFeatures","blob","Blob","type","saveAs","pedit","Toggle","interaction","Draw","GeometryType","POINT","sbar","addControl","vecFeatures","layersArr","getLayers","getArray","vecLayers","filter","v","length","featArr","vec","groupLayers","getLayersArray","excludedFeats","concat","apply","selectCtrl","getInteraction","getLength","f","includes","tooltip","setInfo","removeFeature","clear","console","log","keys","getProperties","t","k","hitTolerance","bar","autoActive","active","ledit","LINE_STRING","geometryFunction","coordinates","geometry","setCoordinates","LineString","nbpts","getCoordinates","TextButton","removeLastPoint","finishDrawing","fedit","POLYGON","legend","Legend","legendCtrl","LegendControl","collapsed","addItem","typeGeom","fillLegend","Tooltip","on","oldValue","setFeature","ctrl","LayerSwitcher","addOverlay","Sidebar","props","id","selected","closeIcon","onClose","preventDefault","stopPropagation","renderTab","tab","icon","faIcon","disabled","key","href","role","onClick","tabid","doOpen","onOpen","children","position","tabs","React","Children","toArray","c","bottomtabs","anchor","toptabs","p","cloneElement","Tab","header","activeStatus","closecls","buttonText","clickButton","response","Property","useState","setLength","area","setArea","setActive","line","poly","evt","dragging","Math","round","formatLength","polygon","getArea","formatArea","getKey","JSON","stringify","getVal","Csv","Pdf","divId","mywindow","window","open","elm","document","getElementById","write","innerHTML","close","focus","print","exportPdf","Image","link","img","altText","rel","src","alt","mapListeners","MapSidebar","setCollapsed","setSelected","selectedFeature","setSelectedFeature","prevSelected","mapListener","forEachFeatureAtPixel","pixel","castedFeature","unshift","set","splice","checkFeature","getKeys","undefined","Home","Data","Tools","Info","Basemap","setMap","useEffect","basemap","createMap","gyLayer","birds","createVectorGroup","createBar","App","Boolean","location","hostname","match","root","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ec4f7d17.chunk.js","sourcesContent":["import WFS from 'ol/format/WFS';\r\nimport View from \"ol/View\";\r\nimport TileLayer from 'ol/layer/Tile';\r\nimport {Stamen, OSM} from 'ol/source';\r\nimport LayerGroup from 'ol/layer/Group';\r\n\r\n\r\nenum BaseLayers {\r\n    Osm = 'http://tile.openstreetmap.org/{z}/{x}/{y}.png',\r\n    OsmBw = 'https://tiles.wmflabs.org/bw-mapnik/${z}/${x}/${y}.png',\r\n    CartoDark = 'https://{1-4}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png',\r\n    CartoLight = 'https://{1-4}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png',\r\n    CartoVoyager = 'https://{1-4}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png',\r\n    EsriLight = 'https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}',\r\n    EsriDark = 'https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Dark_Gray_Base/MapServer/tile/{z}/{y}/{x}',\r\n    EsriImg = 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}'\r\n}\r\n\r\nexport const baseLayerUrl: string = BaseLayers.CartoVoyager;\r\nexport const cartoLight: string =  BaseLayers.CartoLight;\r\nexport const esriImg: string = BaseLayers.EsriImg;\r\nexport const mapCenter: number[] = [774577.0148,6610935.8641];\r\nexport const mapZoom: number = 11;\r\nexport const maxZoom: number = 19;\r\nexport const minZoom: number = 10;\r\nexport const rotationStatus: boolean = false;\r\nexport const view = new View({\r\n    center: mapCenter,\r\n    zoom: mapZoom,\r\n    maxZoom: maxZoom,\r\n    minZoom: minZoom,\r\n    enableRotation: rotationStatus,\r\n})\r\n\r\nexport const wfsTransaction: WFS = new WFS();\r\n\r\nexport enum Icons {\r\n    Home = \"fa fa-home\",\r\n    Info = \"fa fa-info\",\r\n    Twitter = \"fa fa-twitter\",\r\n    Cogs = \"fa fa-cogs\",\r\n    Tools = \"fa fa-wrench\",\r\n    Map = \"fa fa-map\",\r\n    Data = \"fa fa-database\",\r\n    Down = \"fa fa-chevron-down\",\r\n    Up = \"fa fa-chevron-up\",\r\n    Trash = \"fa fa-trash\",\r\n    Csv = \"fa fa-file-excel-o\",\r\n    Pdf = \"fa fa-file-pdf-o\",\r\n    Path = \"fa fa-arrows-h\",\r\n    Circle = \"fa fa-circle\",\r\n    Square = \"fa fa-square-o\",\r\n    Add = \"fa fa-plus\",\r\n    Del = \"fa fa-minus\",\r\n    Png = \"fa fa-file-image-o\",\r\n  }\r\n\r\n  export const baseLayers = new LayerGroup({\r\n    //@ts-ignore\r\n    title: 'Base Layers',\r\n    openInLayerSwitcher: true,\r\n    layers: [\r\n      new TileLayer({\r\n          //@ts-ignore\r\n        title: \"Watercolor\",\r\n        baseLayer: true,\r\n        source: new Stamen({ layer: 'watercolor' })\r\n      }),\r\n      new TileLayer({\r\n        //@ts-ignore\r\n        title: \"Toner\",\r\n        baseLayer: true,\r\n        visible: false,\r\n        source: new Stamen({ layer: 'toner' })\r\n      }),\r\n      new TileLayer({\r\n          //@ts-ignore\r\n        title: \"OSM\",\r\n        baseLayer: true,\r\n        source: new OSM(),\r\n        visible: false\r\n      })\r\n    ]\r\n  });\r\n\r\n\r\n\r\n","import Style from \"ol/style/Style\";\r\nimport Stroke from \"ol/style/Stroke\";\r\nimport Fill from \"ol/style/Fill\";\r\nimport CircleStyle from \"ol/style/Circle\"\r\nimport { FeatureLike } from \"ol/Feature\";\r\n\r\nexport const activeToggleColor: string = 'rgba(141,174,16,1)';\r\nexport const strokeOpacity: number = 0.75;\r\nexport const fillOpacity: number = 0.25;\r\nexport const selectedColor: string[] = [\r\n    `rgba(141,174, 16,${strokeOpacity})`,\r\n    `rgba(141,174, 16,${fillOpacity})`,\r\n];\r\nexport const defaultColor: string[] = [\r\n    `rgba(11, 74, 119,${strokeOpacity})`,\r\n    `rgba(11, 74, 119,${fillOpacity})`,\r\n];\r\nexport const trackColor: string[] = [\r\n    `rgba(168,0,2,${strokeOpacity})`,\r\n    `rgba(50,188,0,${strokeOpacity})`\r\n]\r\n\r\nexport const insertedStyle: Style = new Style({\r\n    stroke: new Stroke({\r\n        color: trackColor[1],\r\n        width: 2,\r\n    }),\r\n});\r\n\r\n\r\n//fillColor koelsch\r\nfunction styleFillColor(feature: FeatureLike): Object {\r\n    let sorte: string = feature.get('name')\r\n    switch (sorte) {\r\n      case 'Bussard': return { color: '#ddd45f' };\r\n      case 'Turmfalke': return { color: '#0d5123' };      \r\n      default: return { color: '#474749' };\r\n    }\r\n  }\r\n  \r\n  //strokeColor koelsch\r\n  function styleStrokeColor(feature: FeatureLike): Object {\r\n    let sorte: string = feature.get('name')\r\n    switch (sorte) {\r\n      case 'Bussard': return { color: '#ff9d3d', width: 2 };\r\n      case 'Turmfalke': return { color: '#888ddd', width: 2 };      \r\n      default: return { color: '#d3d3d3', width: 2 };\r\n    }\r\n  }\r\n\r\nexport function styleBird(feature: FeatureLike): Style {\r\n    let birdStyle: Style = new Style({\r\n      image: new CircleStyle({\r\n        radius: 6,\r\n        fill: new Fill(styleFillColor(feature)),\r\n        stroke: new Stroke(styleStrokeColor(feature))\r\n      })\r\n    })\r\n    return birdStyle;\r\n  }\r\nexport const defaultPoly = new Style({\r\n    stroke: new Stroke({\r\n        // color: feature.get('selected') ? selectedColor[0] : defaultColor[0],\r\n        color: defaultColor[0],\r\n        width: 1\r\n    }),\r\n    fill: new Fill({\r\n        color: defaultColor[1]\r\n        // color: feature.get('selected') ? selectedColor[1] : defaultColor[1],\r\n    })\r\n});\r\n\r\n\r\nexport const selectedStyle = new Style({\r\n    stroke: new Stroke({\r\n        color: selectedColor[0],\r\n        width: 3,\r\n    }),\r\n    fill: new Fill({\r\n        color: selectedColor[1],\r\n    })\r\n});\r\n\r\nexport const lineStyle = new Style({\r\n    fill: new Fill({\r\n        color: 'rgba(255, 25, 255, 0.2)'\r\n    }),\r\n    stroke: new Stroke({\r\n        color: 'rgba(100, 0, 50, 0.5)',\r\n        width: 4\r\n    }),\r\n    image: new CircleStyle({\r\n        radius: 5,\r\n        stroke: new Stroke({\r\n            color: 'rgba(0, 0, 0, 0.7)'\r\n        }),\r\n        fill: new Fill({\r\n            color: 'rgba(255, 255, 255, 0.7)'\r\n        })\r\n    })\r\n})\r\n\r\nexport function defaultStyle(feature: FeatureLike): Style {\r\n    //@ts-ignore\r\n    let featType = feature!.getGeometry().getType()\r\n    if (featType === \"MultiPolygon\") {\r\n        let style: Style = defaultPoly\r\n        return style;\r\n    }\r\n    else if (featType === \"LineString\") {\r\n        return lineStyle\r\n    }\r\n    else {\r\n        return styleBird(feature)\r\n    }\r\n}\r\n\r\n","import Style from \"ol/style/Style\"\r\nimport { Feature } from \"ol\"\r\nimport Point from \"ol/geom/Point\"\r\nimport Fill from \"ol/style/Fill\"\r\nimport Stroke from \"ol/style/Stroke\"\r\nimport CircleStyle from \"ol/style/Circle\"\r\nimport Polygon from \"ol/geom/Polygon\"\r\nimport { defaultPoly } from \"./MapStyles\"\r\n\r\nexport class StyleCreator {\r\n    item: string\r\n    constructor(item: any) {\r\n        this.item = item\r\n    }\r\n\r\n    getColor(): string {\r\n        const randomColor = Math.floor(Math.random() * 16777215).toString(16)\r\n        return '#' + randomColor\r\n    }\r\n}\r\n\r\nexport class LegendPoint {\r\n    pointFeat: any;\r\n    constructor(style: Style) {\r\n        this.pointFeat = new Feature(new Point([0, 0]))\r\n        this.pointFeat.setStyle(style)\r\n    }\r\n\r\n    getFeature() {\r\n        return this.pointFeat\r\n    }\r\n}\r\n\r\nexport class LegendPoly {\r\n    polyFeat: any;\r\n    constructor(style: Style) {\r\n        this.polyFeat = new Feature(new Polygon([[[0, 0], [1, 1], [2, 2]]]))\r\n        this.polyFeat.setStyle(style)\r\n    }\r\n\r\n    getFeature() {\r\n        return this.polyFeat\r\n    }\r\n}\r\n\r\n \r\n\r\nconst labels: string[] = [\"Bussard\", \"Turmfalke\"];\r\nconst labelColors: string[] = [\"#ddd45f\", \"#0d5123\"];\r\nconst labelStrokeColors: string[] = [\"#ff9d3d\", \"#888ddd\"];\r\nconst legendObj: Object = {}\r\n\r\n// for (let item of labels) {\r\n//     let color = new StyleCreator(item).getColor()\r\n//     // labelColors.push(color)\r\n// }\r\n//@ts-ignore\r\nlabels.forEach((label: string, index: number) => legendObj[label] = labelColors[index]);\r\nlet legendList: string[][] = []\r\n\r\nObject.entries(legendObj).forEach((item, i) => {\r\n    const pointDefault = new Style({\r\n        //@ts-ignore\r\n        image: new CircleStyle({\r\n            radius: 7,\r\n            //@ts-ignore\r\n            fill: new Fill({ color: item[1] }),\r\n            stroke: new Stroke({\r\n                color: labelStrokeColors[i],\r\n                width: 2,\r\n            })\r\n        })\r\n    });\r\n    const point = new LegendPoint(pointDefault).getFeature()\r\n    legendList.push([item[0], point]);\r\n})\r\n\r\nconst polyFeat = new LegendPoly(defaultPoly).getFeature()\r\nexport function fillLegend(legend: any) {\r\n    for (let i of legendList) {\r\n        legend.addItem({ title: i[0], feature: i[1], typeGeom: 'Point', className: 'svg', })\r\n    }\r\n    legend.addItem({ title: \"Friedhof\", feature: polyFeat, typeGeom: 'Polygon', className: 'poly', })\r\n\r\n}\r\n\r\n\r\n","\r\nimport { Map } from 'ol';\r\nimport TileLayer from 'ol/layer/Tile';\r\nimport VectorSource from 'ol/source/Vector';\r\nimport GeoJSON from 'ol/format/GeoJSON';\r\nimport { shiftKeyOnly } from 'ol/events/condition';\r\nimport VectorLayer from 'ol/layer/Vector';\r\nimport Select from 'ol/interaction/Select';\r\nimport XYZSource from 'ol/source/XYZ';\r\nimport { baseLayerUrl, view, cartoLight, esriImg } from './MapConfig';\r\nimport { selectedStyle, defaultStyle } from './MapStyles';\r\nimport Draw from 'ol/interaction/Draw';\r\nimport GeometryType from 'ol/geom/GeometryType';\r\nimport { ScaleLine, defaults as defaultControls } from 'ol/control';\r\nimport * as Bar from 'ol-ext/control/Bar';\r\nimport * as Button from 'ol-ext/control/Button';\r\nimport * as Toggle from 'ol-ext/control/Toggle';\r\nimport * as TextButton from 'ol-ext/control/TextButton';\r\nimport * as Legend from 'ol-ext/legend/Legend';\r\nimport * as LegendControl from 'ol-ext/control/Legend';\r\nimport LineString from 'ol/geom/LineString';\r\nimport Polygon from 'ol/geom/Polygon';\r\nimport { fillLegend } from './LegendConfig';\r\nimport * as Tooltip from 'ol-ext/overlay/Tooltip'\r\nimport * as LayerSwitcher from 'ol-ext/control/LayerSwitcher'\r\nimport { OSM } from 'ol/source';\r\nimport LayerGroup from 'ol/layer/Group';\r\nimport { saveAs } from 'file-saver';\r\nimport bussard from '../data/bussard.json';\r\nimport turmfalke from '../data/turmfalke.json';\r\n\r\nexport class MapUtils {\r\n\r\n    static createBaseGroup() {\r\n        const baseLayers = new LayerGroup({\r\n            //@ts-ignore\r\n            title: 'BaseLayers',\r\n            openInLayerSwitcher: true,\r\n            layers: [\r\n                new TileLayer({\r\n                    //@ts-ignore\r\n                    title: \"OSM\",\r\n                    baseLayer: true,\r\n                    source: new OSM(),\r\n                    visible: false\r\n                }),\r\n                this.createBaseLayer(baseLayerUrl, \"CartoDB Voyager\", true),\r\n                this.createBaseLayer(cartoLight, \"CartoDB Light\", false),\r\n                this.createBaseLayer(esriImg, \"AerialImagery\", false)\r\n            ]\r\n        });\r\n        return baseLayers\r\n    }\r\n\r\n    static createBaseLayer(xyzUrl: string, title: string, visible: boolean) {\r\n        const xyzURL: string = xyzUrl;\r\n\r\n        const baseSource: XYZSource = new XYZSource({\r\n            crossOrigin: 'anonymous',\r\n            url: xyzURL\r\n        });\r\n        //@ts-ignore\r\n        const baseLayer: TileLayer = new TileLayer({\r\n            //@ts-ignore\r\n            title: title,\r\n            baseLayer: true,\r\n            source: baseSource,\r\n            visible: visible\r\n        });\r\n\r\n        return baseLayer;\r\n    }\r\n\r\n    static createMap() {\r\n        const baseGroup: LayerGroup = this.createBaseGroup();\r\n        //@ts-ignore\r\n        const map: Map = new Map({\r\n            target: 'map',\r\n            layers: [baseGroup],\r\n            view: view,\r\n            controls: defaultControls().extend([this.createScale()]),\r\n        });\r\n        return map;\r\n    }\r\n    //creates a vector source based on a publised geoserver layer\r\n    static createSource(data: Object) {\r\n        const source: VectorSource<any> = new VectorSource({\r\n            features: new GeoJSON().readFeatures(data, {\r\n                dataProjection: 'EPSG:3857',\r\n                featureProjection: 'EPSG:3857'\r\n            })\r\n        });\r\n        return source;\r\n    }\r\n    //creates a vector layer based on a vector source from a published geoserver layer\r\n    static createVector(title: string, data: Object) {\r\n        //@ts-ignore\r\n        const vectorSource: VectorSource<any> = this.createSource(data);\r\n        //@ts-ignore\r\n        const vectorLayer: VectorLayer = new VectorLayer({\r\n            //@ts-ignore\r\n            title: title,\r\n            source: vectorSource,\r\n            style: defaultStyle,\r\n        });\r\n        // let geomType = vectorLayer.getSource().getFeatures()[0].getGeometry().getType();\r\n        // geomType === \"Polygon\" ? vectorLayer.setStyle(defaultStyle) : vectorLayer.setStyle(defaultStyle);\r\n        // vectorLayer.setMinZoom(16)\r\n        return vectorLayer;\r\n    }\r\n\r\n    static createVectorGroup(title: string) {\r\n        const vectorGroup = new LayerGroup({\r\n            //@ts-ignore\r\n            title: title,\r\n            openInLayerSwitcher: true,\r\n            layers: [\r\n                this.createVector(\"Bussard\", bussard),\r\n                this.createVector(\"Turmfalke\", turmfalke),\r\n            ]\r\n        });\r\n        return vectorGroup\r\n    }\r\n    //creates select interaction\r\n    static createSelect(): Select {\r\n        const select: Select = new Select({\r\n            toggleCondition: shiftKeyOnly,\r\n            style: selectedStyle\r\n        });\r\n        return select;\r\n    }\r\n\r\n    static createScale() {\r\n        let control = new ScaleLine({\r\n            className: 'my-scale-line',\r\n        })\r\n        return control\r\n    }\r\n\r\n    static createBar(map: Map) {\r\n        // Main control bar\r\n        //@ts-ignore\r\n        let vector: VectorLayer = new VectorLayer({\r\n            //@ts-ignore\r\n            displayInLayerSwitcher: false,\r\n            source: new VectorSource()\r\n        });\r\n\r\n        let mainbar = new Bar.default({\r\n            className: 'ol-control.ol-bar.ol-top.ol-right'\r\n        });\r\n        map.addLayer(vector)\r\n        mainbar.setPosition('right')\r\n        // Edit control bar \r\n        var editbar = new Bar.default({\r\n            className: 'myEditBar',\r\n            toggleOne: true,\t// one control active at the same time\r\n            group: true\t\t\t// group controls together\r\n        });\r\n\r\n        let save = new Button.default({\r\n            html: '<i class=\"fa fa-download\"></i>',\r\n            title: \"Export drawn Features\",\r\n            handleClick: function (e) {\r\n                let json = new GeoJSON().writeFeatures(vector.getSource().getFeatures());\r\n                let featArr = [json];\r\n                let blob = new Blob(featArr, { type: 'text/json;charset=utf8' });\r\n                saveAs(blob, 'drawnFeatures.geojson')\r\n            }\r\n        });\r\n\r\n        // Add editing tools\r\n        let pedit = new Toggle.default({\r\n            html: '<i class=\"fa fa-map-marker\" ></i>',\r\n            title: 'Draw Point Feature',\r\n            //@ts-ignore\r\n            interaction: new Draw({\r\n                type: GeometryType.POINT,\r\n                source: vector.getSource()\r\n            })\r\n        });\r\n        var sbar = new Bar.default({\r\n            className: 'mySelectBar',\r\n        });\r\n        sbar.addControl(new Button.default({\r\n            html: '<i class=\"fa fa-times\"></i>',\r\n            title: \"Delete Feature\",\r\n            handleClick: function () {\r\n                let layersArr = map.getLayers().getArray();\r\n                let vecLayers = layersArr.filter((v, i) => i !== 0 && i !== layersArr.length - 1);\r\n                let featArr = [];\r\n                let vecFeatures;\r\n                for (let layer of vecLayers) {\r\n                    let vec = layer as VectorLayer<any>;\r\n                    // let vec = layer as VectorLayer<any>;\r\n                    try {\r\n                        let vecSource = vec.getSource();\r\n                        vecFeatures = vecSource.getFeatures();\r\n                        featArr.push(vecFeatures);\r\n                    }\r\n                    catch {\r\n                        let groupLayers = vec.getLayersArray();\r\n                        for (let groupLayer of groupLayers) {\r\n                            let groupVec = groupLayer as VectorLayer<any>;\r\n                            let vecSource = groupVec.getSource();\r\n                            vecFeatures = vecSource.getFeatures();\r\n                            featArr.push(vecFeatures);\r\n                        }\r\n                    }\r\n                }\r\n                let excludedFeats: any[] = [].concat.apply([], featArr);\r\n                //@ts-ignore\r\n                let features = selectCtrl.getInteraction().getFeatures();\r\n                //@ts-ignore\r\n                if (!features.getLength()) tooltip.setInfo(\"Select an drawn object first...\");\r\n                else {\r\n                    for (var i = 0, f; f = features.item(i); i++) {\r\n                        if (!excludedFeats.includes(f)) {\r\n                            vector.getSource().removeFeature(f);\r\n                        }\r\n                        else {\r\n                            tooltip.setInfo(\"Feature cannot be deleted. Only drawn features can be deleted.\")\r\n                        }\r\n                    }\r\n                    //@ts-ignore\r\n                    selectCtrl.getInteraction().getFeatures().clear();\r\n                }\r\n            }\r\n        }));\r\n\r\n        sbar.addControl(new Button.default({\r\n            html: '<i class=\"fa fa-info\"></i>',\r\n            title: \"Get Feature Info\",\r\n            handleClick: function () {\r\n                //@ts-ignore\r\n                switch (selectCtrl.getInteraction().getFeatures().getLength()) {\r\n                    case 0: console.log(\"Select an object first...\");\r\n                        break;\r\n                    case 1:\r\n                        //@ts-ignore\r\n                        let f = selectCtrl.getInteraction().getFeatures().item(0);\r\n                        let propKeys = Object.keys(f.getProperties());\r\n                        propKeys.map((t, k) => { t !== 'selected' && t !== 'geometry' ? tooltip.setInfo(`${t}: ` + f.get(t)) : tooltip.setInfo('') });\r\n                        break;\r\n                    default:\r\n                        //@ts-ignore\r\n                        console.log(selectCtrl.getInteraction().getFeatures().getLength() + \" objects selected.\");\r\n                        break;\r\n                }\r\n            }\r\n        }));\r\n        let selectCtrl = new Toggle.default({\r\n            html: '<i class=\"fa fa-hand-pointer-o\"></i>',\r\n            title: \"Select Feature\",\r\n            //@ts-ignore\r\n            interaction: new Select({ hitTolerance: 2 }),\r\n            bar: sbar,\r\n            autoActive: true,\r\n            active: false\r\n        });\r\n        var ledit = new Toggle.default({\r\n            html: '<i class=\"fa fa-share-alt\" ></i>',\r\n            title: 'Draw LineString Feature',\r\n            //@ts-ignore\r\n            interaction: new Draw({\r\n                type: GeometryType.LINE_STRING,\r\n                source: vector.getSource(),\r\n                // Count inserted points\r\n                geometryFunction: function (coordinates, geometry) {\r\n                    if (geometry) geometry.setCoordinates(coordinates);\r\n                    //@ts-ignore\r\n                    else geometry = new LineString(coordinates);\r\n                    //@ts-ignore\r\n                    this.nbpts = geometry.getCoordinates().length;\r\n                    return geometry;\r\n                }\r\n            }),\r\n            // Options bar associated with the control\r\n            bar: new Bar.default({\r\n                controls: [\r\n                    new TextButton.default({\r\n                        className: 'deleteBtn',\r\n                        html: 'undo',\r\n                        title: \"Delete last point\",\r\n                        handleClick: function () {\r\n                            //@ts-ignore\r\n                            if (ledit.getInteraction().nbpts > 1) ledit.getInteraction().removeLastPoint();\r\n                        }\r\n                    }),\r\n                    new TextButton.default({\r\n                        className: 'finishBtn',\r\n                        html: 'finish',\r\n                        title: \"Finish drawing\",\r\n                        handleClick: function () {\r\n                            // Prevent null objects on finishDrawing\r\n                            //@ts-ignore\r\n                            if (ledit.getInteraction().nbpts > 2) ledit.getInteraction().finishDrawing();\r\n                        }\r\n                    })\r\n                ]\r\n            })\r\n        });\r\n\r\n        var fedit = new Toggle.default({\r\n            html: '<i class=\"fa fa-bookmark-o fa-rotate-270\" ></i>',\r\n            title: 'Draw Polygon Feature',\r\n            //@ts-ignore\r\n            interaction: new Draw({\r\n                type: GeometryType.POLYGON,\r\n                source: vector.getSource(),\r\n                // Count inserted points\r\n                geometryFunction: function (coordinates, geometry) {\r\n                    //@ts-ignore\r\n                    this.nbpts = coordinates[0].length;\r\n                    //@ts-ignore\r\n                    if (geometry) geometry.setCoordinates([coordinates[0].concat([coordinates[0][0]])]);\r\n                    //@ts-ignore\r\n                    else geometry = new Polygon(coordinates);\r\n                    return geometry;\r\n                }\r\n            }),\r\n            // Options bar ssociated with the control\r\n            bar: new Bar.default({\r\n                controls: [new TextButton.default({\r\n                    className: \"polyUndo\",\r\n                    html: 'undo',//'<i class=\"fa fa-mail-reply\"></i>',\r\n                    title: \"Delete last point\",\r\n                    handleClick: function () {\r\n                        //@ts-ignore\r\n                        if (fedit.getInteraction().nbpts > 1) fedit.getInteraction().removeLastPoint();\r\n                    }\r\n                }),\r\n                new TextButton.default({\r\n                    className: 'finishPoly',\r\n                    html: 'finish',\r\n                    title: \"finish drawing\",\r\n                    handleClick: function () {\r\n                        // Prevent null objects on finishDrawing\r\n                        //@ts-ignore\r\n                        if (fedit.getInteraction().nbpts > 3) fedit.getInteraction().finishDrawing();\r\n                    }\r\n                })\r\n                ]\r\n            })\r\n        });\r\n        // // Print control\r\n        // let printControl = new PrintDialog.default({});\r\n        // //@ts-ignore\r\n        // map.addControl(printControl);\r\n        // //@ts-ignore\r\n        // printControl.on('print', function (e: any) {\r\n        //     // Print success\r\n        //     if (e.canvas) {\r\n        //         //@ts-ignore\r\n        //         window.open().document.write('<img src=\"' + e.canvas.toDataURL() + '\"/>');\r\n        //     } else {\r\n        //         console.warn('No canvas to export');\r\n        //     }\r\n        // });\r\n        // Define a new legend\r\n        let legend = new Legend.default({\r\n            title: 'Legende',\r\n            style: selectedStyle,\r\n        })\r\n\r\n        let legendCtrl = new LegendControl.default({\r\n            // className: 'legendControl',\r\n            title: 'MapLegend',\r\n            legend: legend,\r\n            collapsed: true\r\n        });\r\n\r\n        fillLegend(legend)\r\n\r\n        let tooltip = new Tooltip.default({});\r\n        //@ts-ignore\r\n        selectCtrl.getInteraction('Select').on('select', function (e: any) {\r\n            //@ts-ignore\r\n            if (this.getFeatures().getLength()) {\r\n                tooltip.setInfo(`ID: ${e.feature}`);\r\n            }\r\n            else tooltip.setInfo();\r\n        });\r\n        //@ts-ignore\r\n        selectCtrl.getInteraction('Select').on('change:active', function (e: any) {\r\n            tooltip.setInfo(e.oldValue ? '' : 'Select feature on map');\r\n        });\r\n        //@ts-ignore      \r\n        pedit.getInteraction('DrawPoint').on('change:active', function (e: any) {\r\n            tooltip.setInfo(e.oldValue ? '' : 'Click map to place a point...');\r\n        });\r\n        //@ts-ignore\r\n        ledit.getInteraction('DrawLine').on(['change:active', 'drawend'], function (e: any) {\r\n            //@ts-ignore\r\n            tooltip.setFeature();\r\n            tooltip.setInfo(e.oldValue ? '' : 'Click map to start drawing line...');\r\n        });\r\n        //@ts-ignore\r\n        ledit.getInteraction('DrawLine').on('drawstart', function (e: any) {\r\n            tooltip.setFeature(e.feature);\r\n            tooltip.setInfo('Click to continue drawing line...');\r\n        });\r\n        //@ts-ignore\r\n        fedit.getInteraction('DrawPolygon').on('drawstart', function (e: any) {\r\n            tooltip.setFeature(e.feature);\r\n            tooltip.setInfo('Click to continue drawing polygon...');\r\n        });\r\n        //@ts-ignore\r\n        fedit.getInteraction('DrawPolygon').on(['change:active', 'drawend'], function (e: any) {\r\n            //@ts-ignore\r\n            tooltip.setFeature();\r\n            tooltip.setInfo(e.oldValue ? '' : 'Click map to start drawing polygon...');\r\n        });\r\n\r\n        var ctrl = new LayerSwitcher.default();\r\n        //@ts-ignore\r\n        map.addControl(ctrl);\r\n\r\n\r\n        //@ts-ignore\r\n        map.addOverlay(tooltip);\r\n        //@ts-ignore\r\n        map.addControl(legendCtrl);\r\n\r\n        editbar.addControl(selectCtrl);\r\n        editbar.addControl(pedit);\r\n        editbar.addControl(ledit);\r\n        editbar.addControl(fedit);\r\n        mainbar.addControl(editbar);\r\n        mainbar.addControl(save);\r\n        //@ts-ignore\r\n        map.addControl(mainbar);\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { ISidebarProps } from '../types/types';\r\n\r\nconst Sidebar = (props: ISidebarProps): JSX.Element => {\r\n\r\n    const {\r\n        id,\r\n        selected,\r\n        closeIcon,\r\n    } = props\r\n\r\n\r\n    function onClose(e: any) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        props.onClose && props.onClose();\r\n    }\r\n\r\n    function onOpen(e: any, tabid: string) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        props.doOpen && props.doOpen(tabid);\r\n    }\r\n\r\n    function renderTab(tab: any) {\r\n        let icon: any;\r\n        if (typeof (tab.props.faIcon) === 'string')\r\n            icon = <i className={tab.props.faIcon} />;\r\n        else if (typeof (tab.props.faIcon) === 'object')\r\n            icon = tab.props.faIcon;\r\n        const active: string = tab.props.id === selected ? ' active' : '';\r\n        const disabled: string = tab.props.disabled ? ' disabled' : '';\r\n        return (\r\n            <li className={active + disabled} key={tab.props.id}>\r\n                <a href={'#' + tab.props.id} role=\"tab\" onClick={e => tab.props.disabled || onOpen(e, tab.props.id)}>\r\n                    {icon}\r\n                </a>\r\n            </li>\r\n        );\r\n    }\r\n\r\n    function renderPanes(children: any) {\r\n        return React.Children.map(children,\r\n            p => React.cloneElement(p, {\r\n                onClose: onClose,\r\n                closeIcon: closeIcon,\r\n                active: p.props.id === selected,\r\n                position: position || 'left'\r\n            }));\r\n    }\r\n\r\n    const position: string = ' sidebar-' + (props.position || 'left');\r\n    const collapsed: string = props.collapsed ? ' collapsed' : '';\r\n\r\n    const tabs = React.Children.toArray(props.children).filter(c => !!c);\r\n    //@ts-ignore\r\n    const bottomtabs = tabs.filter(t => t.props.anchor === 'bottom');\r\n    //@ts-ignore\r\n    const toptabs = tabs.filter(t => t.props.anchor !== 'bottom');\r\n\r\n    return (\r\n        <>\r\n            <div id={id} className={\"sidebar leaflet-touch\" + position + collapsed}> {/* ref={el => rootElement = el} */}\r\n                <div className=\"sidebar-tabs\">\r\n                    <ul role=\"tablist\">   {/* Top-aligned */}\r\n                        {toptabs.map(t => renderTab(t))}\r\n                    </ul>\r\n                    <ul role=\"tablist\">   {/* Bottom-aligned */}\r\n                        {bottomtabs.map(t => renderTab(t))}\r\n                    </ul>\r\n                </div>\r\n                <div className=\"sidebar-content\">\r\n                    {renderPanes(tabs)}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Sidebar;","import React from 'react';\r\nimport { ITabProps } from '../types/types';\r\n\r\nconst Tab = (props: ITabProps): JSX.Element => {\r\n\r\n    const {\r\n        id,\r\n        header,\r\n        active,\r\n    } = props\r\n\r\n    const activeStatus = active ? ' active' : '';\r\n    let closeIcon;\r\n    if (typeof (props.closeIcon) === 'string')\r\n        closeIcon = <i className={props.closeIcon} />;\r\n    else if (typeof (props.closeIcon) === 'object')\r\n        closeIcon = props.closeIcon;\r\n    else {\r\n        const closecls = props.position === 'right' ? \"fa fa-caret-right\" : \"fa fa-caret-left\";\r\n        closeIcon = <i className={closecls} />\r\n    }\r\n    return (\r\n        <>\r\n            <div id={id} className={\"sidebar-pane\" + activeStatus}>\r\n                <h1 className=\"sidebar-header\">\r\n                    {header}\r\n                    <div className=\"sidebar-close\" onClick={props.onClose}>\r\n                        {closeIcon}\r\n                    </div>\r\n                </h1>\r\n                {props.children}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default Tab;\r\n\r\n","import React from 'react';\r\nimport { IButtonProps } from '../types/types';\r\n\r\nconst Button = (props: IButtonProps) => {\r\n    const {\r\n        className,\r\n        buttonText,\r\n        clickButton,\r\n        response,\r\n        faIcon,\r\n    } = props\r\n    return (\r\n        <>\r\n            <button\r\n                className={className}\r\n                onClick={clickButton}>\r\n                <b>{buttonText}\r\n                    <i className={faIcon}></i>\r\n                </b>\r\n            </button>\r\n            <p>{response}</p>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Button;\r\n","import React, { useState } from 'react';\r\nimport { IPropertyProps } from '../types/types';\r\nimport GeometryType from 'ol/geom/GeometryType';\r\nimport Button from './Button';\r\nimport { Icons } from '../utils/MapConfig';\r\nimport { getLength, getArea } from 'ol/sphere';\r\nimport LineString from 'ol/geom/LineString';\r\nimport { MapBrowserEvent} from 'ol';\r\nimport Polygon from 'ol/geom/Polygon';\r\n\r\n\r\n\r\nconst Property = (props: IPropertyProps) => {\r\n\r\n    const [length, setLength] = useState(\"\");\r\n    const [area, setArea] = useState(\"\")\r\n    const [active, setActive] = useState(length)\r\n\r\n\r\n    const {\r\n        map,\r\n        keys,\r\n        feature\r\n    } = props\r\n\r\n\r\n    function getVal(k: number, t: string) {\r\n        if (t !== \"geometry\" && t !== \"selected\") {\r\n            return JSON.stringify(feature.get(t))\r\n        }\r\n    }\r\n\r\n    function getKey(k: number, t: string) {\r\n        if (t !== \"geometry\" && t !== \"selected\") {\r\n            return t\r\n        }\r\n    }\r\n\r\n    //@ts-ignore\r\n    let featType: GeometryType = feature!.getGeometry().getType() as GeometryType \r\n    let line: LineString = feature!.getGeometry() as LineString\r\n    let poly: Polygon = feature!.getGeometry() as Polygon\r\n\r\n    function exportPdf(divId: string, title: string) {\r\n        let mywindow = window.open('', 'PRINT', 'height=650,width=900,top=100,left=150');\r\n        let elm = document.getElementById(divId) as HTMLElement;\r\n\r\n        mywindow!.document.write(`<html><head><title>${title}</title>`);\r\n        mywindow!.document.write('</head><body >');\r\n        mywindow!.document.write(elm.innerHTML);\r\n        mywindow!.document.write('</body></html>');\r\n\r\n        mywindow!.document.close(); // necessary for IE >= 10\r\n        mywindow!.focus(); // necessary for IE >= 10*/\r\n\r\n        mywindow!.print();\r\n        mywindow!.close();\r\n\r\n        return true;\r\n    }\r\n\r\n    const formatLength = (line: LineString): string => {\r\n        const length = getLength(line);\r\n        let output;\r\n        if (length > 1000) {\r\n            output = Math.round((length / 1000) * 100) / 100 + ' km';\r\n        } else {\r\n            output = Math.round(length * 100) / 100 + ' m';\r\n        }\r\n        return output;\r\n    };\r\n\r\n    const formatArea = (polygon: Polygon): string => {\r\n        const area = getArea(polygon);\r\n        let output;\r\n        if (area > 100000) {\r\n            output = Math.round((area / 1000000) * 100) / 100 + ' km²';\r\n        } else {\r\n            output = Math.round(area * 100) / 100 + ' m²';\r\n        }\r\n        return output;\r\n    };\r\n\r\n    const pointerMoveHandler = (evt: MapBrowserEvent<any>): void => {\r\n        if (evt.dragging) {\r\n            return;\r\n        }\r\n        if (featType === GeometryType.LINE_STRING) {\r\n            setActive(length)\r\n            setLength(formatLength(line))\r\n        }\r\n        else if (featType === GeometryType.POLYGON){\r\n            setActive(area)\r\n            setArea(formatArea(poly))\r\n        }\r\n        else {\r\n            return \r\n        }\r\n    }\r\n\r\n    map!.on('click', pointerMoveHandler)\r\n\r\n    return (\r\n        <>\r\n            {featType !== GeometryType.LINE_STRING && featType !== GeometryType.POLYGON ?\r\n                <>\r\n                    <div id=\"featureprops\" className=\"featureprops\">\r\n                        {keys.map((t, k) => <div id={t} key={k}><b> {getKey(k, t)}</b> <p>{getVal(k, t)}</p></div>)}\r\n                    </div>\r\n                    <Button\r\n                        className='csvButton'\r\n                        buttonText={`Export as CSV `}\r\n                        faIcon={Icons.Csv}\r\n                        clickButton={() => console.log(\"CSV EXPORT\")}\r\n                    />\r\n                    <Button\r\n                        className='pdfButton'\r\n                        buttonText={`Export as PDF `}\r\n                        faIcon={Icons.Pdf}\r\n                        clickButton={() => exportPdf(\"featureprops\", \"Feature Properties\")}\r\n                    />\r\n                </>\r\n                :\r\n                \r\n                <p>Gemessen: {active}</p>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Property;\r\n","import React from 'react';\r\nimport { IImageProps } from '../types/types';\r\n\r\nconst Image = (props: IImageProps) => {\r\n\r\n    const {\r\n        link,\r\n        img,\r\n        altText,\r\n    } = props\r\n\r\n    return (\r\n        <>\r\n            <div className='image'>\r\n                <a\r\n                    href={link}\r\n                    target='_blank'\r\n                    rel=\"noopener noreferrer\"\r\n                >\r\n                    <img\r\n                        src={img}\r\n                        alt={altText}\r\n                    />\r\n                </a>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Image;\r\n","\r\nimport React, { useState } from 'react';\r\nimport 'ol/ol.css';\r\nimport { IMapSidebarProps, TSelectableTabs } from '../types/types';\r\nimport Sidebar from './Sidebar';\r\nimport Tab from './Tab';\r\nimport { Feature, MapBrowserEvent } from 'ol';\r\nimport { FeatureLike } from 'ol/Feature';\r\nimport { Icons, } from '../utils/MapConfig';\r\nimport Property from './Property';\r\nimport Image from './Image';\r\n\r\n\r\nconst mapListeners = [];\r\n\r\nconst MapSidebar = (props: IMapSidebarProps): JSX.Element => {\r\n\r\n    const { map } = props;\r\n\r\n    const [collapsed, setCollapsed] = useState(false);\r\n    const [selected, setSelected] = useState<TSelectableTabs>('home');\r\n    const [selectedFeature, setSelectedFeature] = useState(new Feature());\r\n\r\n\r\n    function onClose() {\r\n        setCollapsed(true);\r\n        //@ts-ignore\r\n        setSelected(undefined);\r\n    }\r\n    function onOpen(id: string) {\r\n        setCollapsed(false)\r\n        //@ts-ignore\r\n        setSelected(id)\r\n    };\r\n\r\n\r\n    let prevSelected: Feature<any>[] = []\r\n    if (map) {\r\n        if (mapListeners.length === 0) {\r\n\r\n            const mapListener = map.on('click', function (e: MapBrowserEvent<any>): void {\r\n                map!.forEachFeatureAtPixel(e.pixel, (feature: Feature<any> | FeatureLike): void => {\r\n                    let castedFeature: Feature<any> = feature as Feature<any>;\r\n                    prevSelected.unshift(castedFeature)\r\n                    setSelectedFeature(prevSelected[0]);\r\n                    // setSelected('data')\r\n                    // setCollapsed(false)\r\n                    prevSelected[0].set('selected', true);\r\n                    if (prevSelected.length > 1) {\r\n                        prevSelected[1].set('selected', false);\r\n                    }\r\n                    prevSelected.splice(1)\r\n                });\r\n            });\r\n            mapListeners.push(mapListener);\r\n\r\n        }\r\n    }\r\n\r\n    const checkFeature = selectedFeature.getKeys()\r\n\r\n\r\n    // draw.on('drawend', drawEnd);\r\n\r\n    return (\r\n        <>\r\n            <Sidebar\r\n                id='sidebar'\r\n                collapsed={collapsed}\r\n                selected={selected}\r\n                onClose={onClose}\r\n                //@ts-ignore\r\n                doOpen={onOpen}\r\n            >\r\n                <Tab\r\n                    id='home'\r\n                    header='Home'\r\n                    faIcon={Icons.Home}\r\n                >\r\n                    {/* <p>TODO: CSV Export, Editieren der Daten...</p> */}\r\n                    <Image link=\"https://www.nabu-koeln.de/\" img=\"https://upload.wikimedia.org/wikipedia/de/thumb/1/17/Nabu-logo.svg/2000px-Nabu-logo.svg.png\" altText=\"Nabu Köln\" />\r\n                </Tab>\r\n                <Tab\r\n                    id='data'\r\n                    header='Datenausgabe'\r\n                    faIcon={Icons.Data}\r\n                >\r\n                    {checkFeature.length === 0 ?\r\n                        'Keine Daten selektiert.'\r\n                        :\r\n                        <>\r\n                            <Property keys={selectedFeature.getKeys()} feature={selectedFeature} map={map} />\r\n                        </>\r\n                    }\r\n                </Tab>\r\n                <Tab\r\n                    id='instructions'\r\n                    header='Anleitung'\r\n                    faIcon={Icons.Tools}\r\n                    anchor='top'\r\n                >\r\n                </Tab>\r\n                <Tab\r\n                    id='info'\r\n                    header='Mehr Infos'\r\n                    faIcon={Icons.Info}\r\n                    anchor='bottom'\r\n                >\r\n                </Tab>\r\n            </Sidebar>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MapSidebar;","\r\nimport React, { useState, useEffect } from 'react';\r\nimport 'ol/ol.css';\r\nimport { Map } from 'ol'\r\nimport { IMapProps, IMapState } from '../types/types';\r\nimport { MapUtils } from '../utils/MapUtils';\r\nimport MapSidebar from './MapSidebar';\r\nimport data from '../data/friedhoefe_3857.json';\r\n\r\nconst Basemap = (props: IMapProps) => {\r\n    //@ts-ignore\r\n    const [map, setMap] = useState<any | IMapState>(null);\r\n\r\n    useEffect(() => {\r\n        const basemap: Map = MapUtils.createMap();\r\n        setMap(basemap);        \r\n        const gyLayer = MapUtils.createVector(\"Friedhof\", data);       \r\n        basemap.addLayer(gyLayer);        \r\n        const birds = MapUtils.createVectorGroup(\"Greifvögel\");\r\n        basemap.addLayer(birds);\r\n        // const select = MapUtils.createSelect();\r\n        // basemap.addInteraction(select);\r\n        MapUtils.createBar(basemap)\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <div id='map' className='map'></div>\r\n            <MapSidebar map={map} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Basemap;","import React from 'react';\r\n\r\nimport 'ol-ext/dist/ol-ext.css'\r\nimport 'ol/ol.css';\r\nimport './App.css';\r\nimport Basemap from './components/Map';\r\n\r\nconst App: React.FC = (): JSX.Element => {\r\n\r\n  return (\r\n    <Basemap />\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport '../node_modules/font-awesome/css/font-awesome.min.css'; \r\n\r\nconst root: HTMLElement | null = document.getElementById('root');\r\nReactDOM.render(<App />, root);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}